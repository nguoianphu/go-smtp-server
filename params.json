{
  "name": "Go-smtp-server",
  "tagline": "An ESMTP server library written in Go",
  "body": "# go-smtp-server\r\n\r\n[![GoDoc](https://godoc.org/github.com/nguoianphu/go-smtp-server?status.svg)](https://godoc.org/github.com/nguoianphu/go-smtp-server)\r\n[![Linux and OS X Build Status](https://travis-ci.org/nguoianphu/go-smtp-server.svg?branch=master&label=Linux+and+OS+X+build \"Linux and OS X Build Status\")](https://travis-ci.org/nguoianphu/go-smtp-server)\r\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/ovn8ncrgcf9lpsan?svg=true&label=Windows+build \"Windows Build Status\")](https://ci.appveyor.com/project/nguoianphu/go-smtp-server)\r\n\r\nAn ESMTP server library written in Go.\r\n\r\n## Features\r\n\r\n* ESMTP server implementing [RFC 5321](https://tools.ietf.org/html/rfc5321)\r\n* Support for SMTP AUTH ([RFC 4954](https://tools.ietf.org/html/rfc4954)) and PIPELINING ([RFC 2920](https://tools.ietf.org/html/rfc2920))\r\n* UTF-8 support for subject and message\r\n\r\n\r\n- username: ```username```\r\n- password: ```password```\r\n\r\n## Build and compile\r\n\r\n### Linux\r\n\r\n\tgo get -v github.com/nguoianphu/go-smtp-server/smtp\r\n\t./$GOPATH/bin/smtp\r\n\t\r\n\t\r\n\t# Cross-compile for Window 64-bit\r\n\t# https://golang.org/doc/install/source#environment\r\n\t\r\n\texport GOOS=windows\r\n\texport GOARCH=amd64\r\n\tgo get -v github.com/nguoianphu/go-smtp-server/smtp\r\n\t$GOPATH/bin/windows_amd64/smtp.exe\r\n\r\n### Windows\r\n\t\r\n\tgo get -v github.com/nguoianphu/go-smtp-server/smtp\r\n\t%GOPATH%/bin/smtp.exe\r\n\t\r\n\t# Cross-compile for Linux 64-bit\r\n\t# https://golang.org/doc/install/source#environment\r\n\t\r\n\tset GOOS=linux\r\n\tset GOARCH=amd64\r\n\tgo get -v github.com/nguoianphu/go-smtp-server/smtp\r\n\t%GOPATH%/bin/linux_amd64/smtp\r\n\t\r\n## Usage in your golang code\r\n\r\n```go\r\n\r\npackage main\r\n\r\nimport (\r\n\t\"errors\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\r\n\tsmtpserver \"github.com/nguoianphu/go-smtp-server\"\r\n)\r\n\r\ntype Backend struct{}\r\n\r\nfunc (bkd *Backend) Login(username, password string) (smtpserver.User, error) {\r\n\tif username != \"username\" || password != \"password\" {\r\n\t\treturn nil, errors.New(\"Invalid username or password\")\r\n\t}\r\n\treturn &User{}, nil\r\n}\r\n\r\ntype User struct{}\r\n\r\nfunc (u *User) Send(msg *smtpserver.Message) error {\r\n\tlog.Println(\"Sending message:\", msg)\r\n\r\n\tif b, err := ioutil.ReadAll(msg.Data); err != nil {\r\n\t\treturn err\r\n\t} else {\r\n\t\tlog.Println(\"Data:\", string(b))\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (u *User) Logout() error {\r\n\treturn nil\r\n}\r\n\r\nfunc main() {\r\n\tbkd := &Backend{}\r\n\r\n\ts := smtpserver.New(bkd)\r\n\r\n\ts.Addr = \":1025\"\r\n\ts.Domain = \"localhost\"\r\n\ts.MaxIdleSeconds = 300\r\n\ts.MaxMessageBytes = 1024 * 1024\r\n\ts.MaxRecipients = 50\r\n\ts.AllowInsecureAuth = true\r\n\r\n\tlog.Println(\"Starting server at\", s.Addr)\r\n\tif err := s.ListenAndServe(); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n}\r\n```\r\n\r\nYou can use the server manually with `telnet`:\r\n```\r\n$ telnet localhost 25\r\nEHLO localhost\r\nAUTH PLAIN\r\nAHVzZXJuYW1lAHBhc3N3b3Jk\r\nMAIL FROM:<root@nsa.gov>\r\nRCPT TO:<root@gchq.gov.uk>\r\nDATA\r\nHey <3\r\n.\r\n```\r\n\r\n## Licence\r\n\r\nMIT\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}